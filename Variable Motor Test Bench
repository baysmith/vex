#pragma config(Sensor, in1,    Potentiometer,  sensorPotentiometer)
#pragma config(Sensor, in2,    Light_sensor,   sensorReflection)
#pragma config(Sensor, in3,    Line_follower,  sensorLineFollower)
#pragma config(Sensor, dgtl1,  bump,           sensorTouch)
#pragma config(Sensor, dgtl2,  Limit,          sensorTouch)
#pragma config(Sensor, dgtl3,  Sonar_in,       sensorSONAR_cm)
#pragma config(Sensor, dgtl5,  Quad_in,        sensorQuadEncoder)
#pragma config(Sensor, dgtl11, Bump_,          sensorTouch)
#pragma config(Motor,  port2,           right_motor,   tmotorVex269_MC29, openLoop)
#pragma config(Motor,  port3,           Servo,         tmotorServoStandard, openLoop)
#pragma config(Motor,  port9,           left_motor,    tmotorVex269_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task main()
{
//This code is for a VEX POE test bench with The ability to control the speed of rotation of the motors using a multitude of different methods.
	int x; //
	int light; //
	int distance; //
	int degrees; // Amount of degrees the potentiometer rotates

	SensorValue[Quad_in] = 0;
SensorValue[Potentiometer] = 0;
	while (1==1){
 		if(SensorValue(bump)==1) {
			x = SensorValue[Quad_in]/2;
			motor[right_motor] =x;
			motor[left_motor] =x;
 		}
 		else if(SensorValue(Sonar_in)<20){
				distance = SensorValue[Sonar_in]*5;
			motor[right_motor] =distance;
			motor[left_motor] =distance;
 		}else if(SensorValue(Bump_)==1){
  		light = SensorValue[Light_sensor]/-2;
				motor[Servo] =light;//Note: be weary about how much you move this, too much movement could destroy your servo
 		}else if(SensorValue(Potentiometer)>10){
  		 degrees = SensorValue[Potentiometer]/5;//Note: be weary about howmuch you move this, too much movement could destroy your servo
				motor[Servo] =degrees;
 		}else{
			motor[right_motor] =0;
			motor[left_motor] =0;
			motor[Servo] =0;
		}
 	}
}
